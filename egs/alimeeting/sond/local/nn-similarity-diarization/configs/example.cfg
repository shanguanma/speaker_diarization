[Datasets]
# this is $folds_path in the data preparation step (also in run.sh)
#data_path /PATH/TO/FOLDS_PATH
data_path = data/blstm_sc/net_input
# data_path is as follows:
#tree data/blstm_sc/net_input/
#data/blstm_sc/net_input/
#|-- ch0
#|   |-- test
#|   |   |-- ref.rttm
#|   |   |-- segments
#|   |   |-- utt2spk
#|   |   `-- xvector.scp
#|   `-- train
#|       |-- ref.rttm
#|       |-- segments
#|       |-- utt2spk
#|       `-- xvector.scp
#|-- ch1
#|   |-- test
#|   |   |-- ref.rttm
#|   |   |-- segments
#|   |   |-- utt2spk
#|   |   `-- xvector.scp
#|   `-- train
#|       |-- ref.rttm
#|       |-- segments
#|       |-- utt2spk
#|       `-- xvector.scp
#|-- ch2
#|   |-- test
#|   |   |-- ref.rttm
#|   |   |-- segments
#|   |   |-- utt2spk
#|   |   `-- xvector.scp
#|   `-- train
#|       |-- ref.rttm
#|       |-- segments
#|       |-- utt2spk
#|       `-- xvector.scp
#|-- ch3
#|   |-- test
#|   |   |-- ref.rttm
#|   |   |-- segments
#|   |   |-- utt2spk
#|   |   `-- xvector.scp
#|   `-- train
#|       |-- ref.rttm
#|       |-- segments
#|       |-- utt2spk
#|       `-- xvector.scp
#|-- ch4
#|   |-- test
#|   |   |-- ref.rttm
#|   |   |-- segments
#|   |   |-- utt2spk
#|   |   `-- xvector.scp
#|   `-- train
#|       |-- ref.rttm
#|       |-- segments
#|       |-- utt2spk
#|       `-- xvector.scp
#`-- fullref.rttm
#
#15 directories, 41 files

[Model]
# Supported models: 'lstm', 'lstm_cos_ws', 'lstm_cos_res'
model_type = lstm

[Hyperparams]
lr = 0.01
max_len = 400
no_cuda = False
seed = 1234
num_epochs = 100
# at the epoch numbers in scheduler_steps, the lr will be multiplied by scheduler_lambda
scheduler_steps = [40, 80]
scheduler_lambda = 0.1

[Outputs]
# this is where models will be saved
base_model_dir = exp/blstm_sc_folder
# Interval at which models will be stored for checkpointing purposes
checkpoint_interval = 1

[Clustering]
# Only 'sc' and 'ahc' are supported
cluster_type = sc

# The following values are fed into np.linspace to produce a range of parameters to try clustering the train portion over
# Note: cparam_start must be positive if spectral clustering is used.
cparam_start = 0.95
cparam_end = 1.0
cparam_steps = 20
